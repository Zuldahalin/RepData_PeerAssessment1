submit()
submit()
submit()
q()
q()
library("swirl")
swirl()
Sys.getlocale()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 9, minutes = 34)
this_moment
?now
nyc <- now("UTC")
nyc <- now("America/New_York")
myc
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hour(15) + minute(50)
arrive <- depart + hms(15:50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy(arrive, tz = "Singapore") - mdy("June 17, 2008")
last_time <- mdy(arrive, tz = "Singapore") - mdy("June 17, 2008", tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
q()
q()
q()
q()
q()
setwd("C:/Users/User/Desktop/Coursera/Module4_Exploratory_Data_Analysis/Project2")
source('C:/Users/User/Desktop/Coursera/Module4_Exploratory_Data_Analysis/Project2/plot6.R')
png(filename="Plot6.png", width=480, height=480)
ggplot(merged.city, aes(x=factor(year), y=total, fill=factor(city)))+
geom_bar(stat = "identity", position = "dodge") +
labs(title="Changes in Emissions from motor vehicle sources\nin Baltimore City and LA County from 1999 to 2008", x="Year", y="Log PM2.5 Motor Vehicle Emission", fill="city")
dev.off()
View(merged.city)
View(dt.in.Baltimore.LA)
setwd("C:/Users/User/Desktop/Coursera")
library(swirl)
swirl()
pal(seq(0,1, len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
p2(20)
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue","green"), alpha=0.5)
p3(5)
plot(x, y, pch=19, col=rgb(0, .5, .5))
plot(x, y, pch=19, col=rgb(0, .5, .5, .3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col=pal(20))
image(volcano, col=p1(20))
q()
setwd("C:/Users/User/Desktop/Coursera/Module4_Exploratory_Data_Analysis/Week 4 Case Study RDPang")
pm0 <- read.table("RD_501_88101_1999-0.txt", comment.char = "#", header = FALSE, sep = "|", na.strings = "")
dim(pm0)
head(pm0)
setwd("C:/Users/User/Desktop/Coursera")
swirl()
library(swirl)
swirl()
str(mpg)
qplot
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, col=drv)
qplot(displ, hwy, data = mpg, color=drv)
qplot(displ, hwy, data = mpg, color=drv, geom = c("points","smooth"))
qplot(displ, hwy, data = mpg, color=drv, geom = c("point","smooth"))
qplot
qplot(y=hwy, data=mpg, color=drv)
myhigh
qplot(drv, hwy, data=mpg, geom="boxplot")
qplot(drv, hwy, data=mpg, geom="boxplot", color=manufacturer)
qplot(hwy, data = mpg, fill=drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data=mpg, geom=c("point","smooth"), facets = .~drv, method="loess")
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(. ~ drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(. ~ drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink", size=4, aplha=1/2)
g+geom_point(color="pink", size=4, aplha=1/2)
g+geom_point(color="pink",size=4,aplha=1/2)
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(size=4,alpha=1/2,aes(color=drv))
g+geom_point(size=4,alpha=1/2,aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
g+geom_point(aes(color=drv,size=2,alpha=1/2))+geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g+geom_point(aes(color=drv),size=2,alpha=1/2)+geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(base_family = "Times")
plot(myx,myy,type="l",ylim=c(-3,3))
g <- ggplot(testdat, aes(x=myx,y=myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim(-3,3))
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g <- ggplot(mpg, aes(x=displ, y=hwy, color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl,margins = TRUE)
g+geom_point()+facet_grid(drv~cyl,margins = TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl,margins = TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
q()
setwd("C:/Users/User/Desktop/Coursera/Module4_Exploratory_Data_Analysis/Project2/AnswersProject2")
setwd("C:/Users/User/Desktop/Coursera")
library(swirl)
swirl()
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom = "density")
qplot(price, data=diamonds, geom = "density", color=cut)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom=c("point", "smooth"), method="lm")
qplot(carat, price, data=diamonds, color=cut, geom=c("point", "smooth"), method="lm", facets = .~cut)
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length=4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth,price))
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2)+geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid( . ~ cut)
install.packages("fields")
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=.4, col="red")
5
12
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col=c("red", "orange", "purple"), pch=3, cex=2, lwd=2)
mdist(x,y,cx,cy)
which.min(distTmp, 2, which.min)
apply(distTmp, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust2])
tapply
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black", "red", "green"), pch=3, cex=3, lwd=3)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
q()
library(swirl)
swirl()
mdist <- dist(sub1[,10:12])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[, -c(562,563)], centers = 6)
table
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch=19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walking,1:12], pch=19, ylab = "Walking Cluster")
plot(kClust$centers[walkdown,1:12], pch=19, ylab = "Walking Cluster")
plot(kClust$centers[walkdown,1:12], pch=19, ylab = "Walkdown Cluster")
q()
library(swirl)
swirl()
dim(pm0)
head(pm0)
names(cnames)
cnames
cnames <- strsplit(cnames, "|", ffixed = TRUE)
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
play()
wcol
dim(wcol)
str(wcol)
temp <- as.numeric(c(3,4,5,11,13))
temp
str(temp)
nxt()
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(as.name(x1))
mean(as.na(x1))
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
negative <- x1<0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & County.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & pm0$county.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, county.code == 63 & Site.ID == 2008)
pm0sub <- subset(cnt0, pm0$County.Code == 63 & Site.ID == 2008)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar=c(4,4,2,1))
plot(dates0, x0sub, pch=20)
abline(lwd=2, median(x0sub, na.rm = TRUE))
abline(median(x0sub, na.rm = TRUE), lwd=2)
abline
abline(h=median(x0sub, na.rm = TRUE), lwd=2)
plot(dates1, x1sub, pch=20)
abline(h=median(x1sub, na.rm = TRUE), lwd=2)
rng <- range(x0sub, x1sub, na.rm=TRUE)
rng
mno <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state=names(mn0), mean=mn0)
d1 <- data.frame(state=names(mn1), mean=mn1)
mrg <- merge(d0, d1, by="state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5,2.5), ))
with(mrg, points(rep(2,52), mrg[,3]))
segments()
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y,]
q()
library(knitr)
knit2html("document.Rmd")
```
```{r}
library(datasets)
library(ggplot2)
str(mtcars)
```
q()
q()
(0.9)(0.0002)
(0.9)*(0.0002)
(0.9*0.0002)/((0.9*0.0002)+(1-0.99)*(1-0.0002))
pbeta(0.5,2,1)
qbeta(0.8, 2, 1)
setwd("C:/Users/User/Desktop/Coursera/Module5_Reproducible_Research/RepData_PeerAssessment1")
setwd("~/Zulkhairi/MDeC MOOC/MDeC MyProCert Sessions/Session 5 Reproducible Research")
library(ggplot2)
library(knitr)
file<-"pedometer.csv"#use double backslash to deal with escape character
MyData<-read.csv(file,header = TRUE, sep = ",")
View(MyData)
average_steps_perday<-mean(MyData$Steps)#meanofsteps
average_steps_perday
average_steps_byday<-aggregate(MyData$Steps,list(Day = MyData$Day),mean)#average per day
dailyaverage<-aggregate(Steps ~ Day, MyData, mean)#another way of doing average per day, crossref Steps and Day
average_steps_byday
dailyaverage
colnames(average_steps_byday) <- c("day","steps")#rename columns
head(average_steps_byday)#sample of average by day
ggplot(average_steps_byday, aes(x=steps))+ geom_histogram()
ggplot(data=average_steps_byday, aes(average_steps_byday$steps)) + geom_histogram()
medianofstepsbyday=median(average_steps_byday$steps)#median of average steps by day
medianofstepsbyday
medianofstepsbyday2=median(dailyaverage$Steps)
medianofstepsbyday2
setwd("C:/Users/User/Desktop/Coursera/Module5_Reproducible_Research/RepData_PeerAssessment1")
library(knitr)
library(ggplot2)
file2<-"pedometer2.csv"#use double backslash to deal with escape caharacter
MyData2<-read.csv(file2,header = TRUE, sep = ",")#MyData2 becomes a dataframe
library(ggplot2)
library(knitr)
file <- "activity.csv"
dat <- read.csv(file, header = TRUE, sep = ",")
dat$date <- as.Date(dat$date)
head(dat)
summary(dat)
head(dat)
sum(dat$steps)
sum(na.omit(dat$steps))
getwd()
total_steps_per_day <- aggregate(step ~ date, dat, sum)
total_steps_per_day <- aggregate(step ~ date, dat)
sum(dat$steps, by=date)
sum(dat$steps, by=date, na.rm = TRUE)
sum(dat$steps, by=dat$date, na.rm = TRUE)
sum(dat$steps, na.rm = TRUE)
aggregate(dat$steps, list(date = dat$date), sum)
total_num_steps_perday <- aggregate(dat$steps, list(date = dat$date), sum)
colnames(total_num_steps_perday) <- c("date", "steps")
head(total_num_steps_perday)
with(total_num_steps_perday, hist(steps, main = "Total number of steps taken each day"))
mean_steps <- mean(na.omit(dat$steps))
median_steps <- median(na.omit(dat$steps))
mean(total_num_steps_perday)
mean(total_num_steps_perday$steps)
mean(na.omit(total_num_steps_perday$steps))
mean_steps_perday <- aggregate(dat$steps, list(date = dat$date), mean)
head(mean())
head(mean_steps_perday)
colnames(mean_steps_perday) <- c("date", "mean_steps")
head(mean_steps_perday)
mean(na.omit(mean_steps_perday$mean_steps))
median_steps_perday <- aggregate(dat$steps, list(date = dat$date), median)
colnames(median_steps_perday) <- c("date", "median_steps")
head(median_steps_perday)
median_steps_perday
head(median_steps_perday)
merge(total_num_steps_perday, mean_steps_perday)
total_steps_perday <- merge(total_num_steps_perday, mean_steps_perday)
head(total_steps_perday)
total_steps_perday <- merge(total_steps_perday, median_steps_perday)
head(total_steps_perday)
ave_steps_perinterval <- aggregate(steps ~ interval, dat, mean)##Calculate average steps per 5-minute interval
ave_steps_perinterval
head(ave_steps_perinterval)
View(total_steps_perday)
ggplot(ave_steps_perinterval, aes(x=interval, y=steps)) +
geom_line(color="blue", size=1) +
labs(title="Average Daily Activity Pattern", x="5-minute interval", y="Number of steps all days") +
theme_bw()
max_interval <- ave_steps_perinterval[which.max(
ave_steps_perinterval$steps),]
max_interval
total_missing_values <- sum(!complete.cases(dat))
data_full <- dat#Create a new dataset that is equal to the original dataset but with the missing data filled in.
nas <- is.na(data_full$steps)#number of NAs in new dataset
avg_perday <- tapply(data_full$steps, data_full$date, mean, na.rm = TRUE, simplify = TRUE)
avg_perday
head(avg_perday)
data_full$steps[nas] <- avg_perday[as.character(data_full$date[nas])]
sum(is.na(data_full$steps))
avg_perday <- tapply(data_full$steps, data_full$date, mean, na.rm = TRUE, simplify = TRUE)
head(avg_perday)
summary(data_full)
avg_interval <- tapply(data_full$steps, data_full$interval, mean, na.rm=TRUE, simplify=TRUE)#returns mean of steps by 5-min interval while ignoring Nas as a vector
avg_perday <- tapply(data_full$steps, data_full$date, mean, na.rm = TRUE, simplify = TRUE)
View(mean_steps_perday)
data_full$steps[nas] <- avg_interval[as.character(data_full$interval[nas])]#assign values of steps according to interval-slice
verify <- sum(is.na(data_full$steps))#check for no of Nas in new dataset
verify
summary(data_full)
ggplot(data_full, aes(x=steps))+ geom_histogram()
mean_total_steps <- mean(data_full$steps)
median_total_steps <- median(data_full$steps)
sum(is.na(data_full$steps))#check for no of Nas in new dataset
data_full$weektype <- factor(data_full$weekdays(date))
data_full$weektype <- factor(weekdays(data_full$date))
head(data_full)
data_full$weekday <- factor(weekdays(data_full$date))#copy a new factor column from the date taking the weekday
head(data_full)
str(data_full)
data_full$weektype <- NULL
str(data_full)
head(data_full)
levels(data_full$weektype) <- list(
Weekday= c("Monday", "Tuesday","Wednesday","Thursday","Friday"),
Weekend = c("Saturday", "Sunday")#rename weekday to either weekend or weekday
)
levels(data_full$weekday) <- list(
Weekday= c("Monday", "Tuesday","Wednesday","Thursday","Friday"),
Weekend = c("Saturday", "Sunday")#rename weekday to either weekend or weekday
)
head(data_full)
data_full
tail(data_full)
data_full$weektype <- factor(weekdays(data_full$date))#copy a new factor column from the date taking the weekday
levels(data_full$weektype) <- list(
Weekday= c("Monday", "Tuesday","Wednesday","Thursday","Friday"),
Weekend = c("Saturday", "Sunday")#rename weekday to either weekend or weekday
)
data_full
head(data_full)
data_full$weekday <- NULL
head(data_full)
library("lattice")
weekTypeIntervalSteps <- aggregate(data=data_full, steps ~ weektype + interval, FUN=mean)#create new object to show average of steps across intervals, grouped by weektype
head(weekTypeIntervalSteps)
xyplot(
type="l",
data=weekTypeIntervalSteps,
Steps ~ interval | weektype,
xlab="5-minute interval",
ylab="Weektype",
layout=c(1,2)
)
xyplot(
type="l",
data=weekTypeIntervalSteps,
steps ~ interval | weektype,
xlab="5-minute interval",
ylab="Weektype",
layout=c(1,2)
)
1.**Loading and preprocessing the data**
Read the activity dataset and convert date column to date format YYYY-MM-DD
```{r readdata, echo=TRUE}
library(ggplot2)
library(knitr)
file <- "activity.csv"
dat <- read.csv(file, header = TRUE, sep = ",")
dat$date <- as.Date(dat$date)
```
getwd()
q()
